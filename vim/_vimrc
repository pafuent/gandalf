set encoding=utf-8

set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin('$USERPROFILE/vimfiles/bundle/')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Bundle 'fugitive.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
"Bundle 'rosenfeld/conque-term'
"Bundle 'majutsushi/tagbar'
"Bundle 'jmcantrell/vim-virtualenv'

Bundle 'morhetz/gruvbox'                                                        
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" No more swp files
set noswapfile

" Highligth search results
set hlsearch

" To allow swich between buffers without saving them
set hidden

" Colorscheme
set t_Co=256
set background=dark
"colorscheme gruvbox
colorscheme Tomorrow-Night

" Hide the --Insert-- from the status line (the others too)
set noshowmode

" Tabs as spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

autocmd Filetype java setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2

" Aid for 80 chars line length
set colorcolumn=80

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" always show status bar
set laststatus=2

" Don't redraw while executing macros (good performance config)
set lazyredraw

" NERDTree ingnore filters
let NERDTreeIgnore=['\~$','\.pyc$']

" Airline
let g:airline_powerline_fonts=1
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#enabled = 1

" Used by CtrlP
set wildignore+=*/build/*,*.pyc,*.class,*.jar

"let g:pyflakes_use_quickfix = 0
"highlight clear SpellBad
"highlight SpellBad cterm=underline ctermfg=1

"let g:tagbar_autofocus = 1

" Set the <leader>
let mapleader=","

" better backup, swap and undos storage
set directory=$USERPROFILE/vimfiles/dirs/tmp " directory to place swap files in
set backup " make backup files
set backupdir=$USERPROFILE/vimfiles/dirs/backups " where to put backup files
set undofile " persistent undos - undo after you re-open the file
set undodir=$USERPROFILE/vimfiles/dirs/undos
set viminfo+=n$USERPROFILE/vimfiles/dirs/viminfo

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" CtrlP
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'continuous_integration/reports'

" Syntastic
let g:syntastic_java_checkers=['javac']
let g:syntastic_java_javac_config_file_enabled = 1

" My mappings
nmap <C-PageUp> :bp<CR>
imap <C-PageUp> <Esc>:bp<CR>
nmap <C-PageDown> :bn<CR>
imap <C-PageDown> <Esc>:bn<CR>
nmap <expr> <C-n> g:NERDTree.IsOpen() ? ':NERDTreeToggle<CR>' : ':NERDTree %:p:h<CR>'
map <C-t> :CtrlPTag<CR>
map <C-b> :ConqueTerm bash<CR>
"map <C-t> :TagbarToggle<CR>
map <C-c> :SyntasticCheck<CR>
map <F3> :set hlsearch!<CR>

source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

